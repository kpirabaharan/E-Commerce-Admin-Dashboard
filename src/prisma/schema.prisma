generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // uses connection pooling
}

model Store {
  id              String      @id @default(uuid())
  userId          String
  name            String
  limit           Int         @default(5)
  icon            String      @default("store")
  color           String      @default("zinc")
  homeBillboardId String      @default(" ")
  billboards      Billboard[] @relation("StoreToBillboard")
  categories      Category[]  @relation("StoreToCategory")
  sizes           Size[]      @relation("StoreToSize")
  colors          Color[]     @relation("StoreToColor")
  products        Product[]   @relation("StoreToProduct")
  orders          Order[]     @relation("StoreToOrder")
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model Billboard {
  id         String     @id @default(uuid())
  storeId    String
  label      String
  imageKey   String
  imageUrl   String
  store      Store      @relation("StoreToBillboard", fields: [storeId], references: [id])
  categories Category[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Category {
  id          String    @id @default(uuid())
  storeId     String
  billboardId String
  name        String
  store       Store     @relation("StoreToCategory", fields: [storeId], references: [id])
  billboard   Billboard @relation(fields: [billboardId], references: [id])
  products    Product[] @relation("CategoryToProduct")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Size {
  id        String    @id @default(uuid())
  storeId   String
  name      String
  value     String
  store     Store     @relation("StoreToSize", fields: [storeId], references: [id])
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Color {
  id        String    @id @default(uuid())
  storeId   String
  name      String
  value     String
  store     Store     @relation("StoreToColor", fields: [storeId], references: [id])
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Product {
  id         String      @id @default(uuid())
  storeId    String
  categoryId String
  sizeId     String
  colorId    String
  name       String
  amount     Int         @default(1)
  price      Decimal
  isFeatured Boolean     @default(false)
  isArchived Boolean     @default(false)
  store      Store       @relation("StoreToProduct", fields: [storeId], references: [id])
  category   Category    @relation("CategoryToProduct", fields: [categoryId], references: [id])
  size       Size        @relation(fields: [sizeId], references: [id])
  color      Color       @relation(fields: [colorId], references: [id])
  images     Image[]
  OrderItem  OrderItem[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Image {
  id        String   @id @default(uuid())
  productId String
  url       String
  key       String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id         String      @id @default(uuid())
  storeId    String
  isPaid     Boolean     @default(false)
  name       String      @default("")
  email      String      @default("")
  phone      String      @default("")
  address    String      @default("")
  store      Store       @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems OrderItem[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model OrderItem {
  id           String   @id @default(uuid())
  productId    String
  quantity     Int      @default(1)
  orderId      String
  deliveryDate DateTime
  product      Product  @relation(fields: [productId], references: [id])
  order        Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
}
